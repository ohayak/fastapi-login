"""create

Revision ID: 18ebb8d904c6
Revises: 
Create Date: 2022-12-05 15:18:12.592599

"""
from datetime import datetime

import sqlalchemy as sa
import sqlmodel

from alembic import op

# revision identifiers, used by Alembic.
revision = "18ebb8d904c6"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    auth_group = op.create_table(
        "auth_group",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("key", sqlmodel.sql.sqltypes.AutoString(length=40), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=40), nullable=False),
        sa.Column("desc", sqlmodel.sql.sqltypes.AutoString(length=400), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_auth_group_key"), "auth_group", ["key"], unique=True)
    op.create_table(
        "auth_permission",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("key", sqlmodel.sql.sqltypes.AutoString(length=40), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=40), nullable=False),
        sa.Column("desc", sqlmodel.sql.sqltypes.AutoString(length=400), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_auth_permission_key"), "auth_permission", ["key"], unique=True)
    auth_role = op.create_table(
        "auth_role",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("key", sqlmodel.sql.sqltypes.AutoString(length=40), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=40), nullable=False),
        sa.Column("desc", sqlmodel.sql.sqltypes.AutoString(length=400), nullable=False),
        sa.Column("parent_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["parent_id"], ["auth_role.id"], ondelete="cascade"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_auth_role_key"), "auth_role", ["key"], unique=True)
    op.create_table(
        "auth_token",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("token", sqlmodel.sql.sqltypes.AutoString(length=48), nullable=False),
        sa.Column("data", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("create_time", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_auth_token_token"), "auth_token", ["token"], unique=True)
    auth_user = op.create_table(
        "auth_user",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("username", sqlmodel.sql.sqltypes.AutoString(length=32), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("fullname", sqlmodel.sql.sqltypes.AutoString(length=64), nullable=True),
        sa.Column("password", sqlmodel.sql.sqltypes.AutoString(length=128), nullable=False),
        sa.Column("email", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("create_time", sa.DateTime(), nullable=False),
        sa.Column("update_time", sa.DateTime(), server_default=sa.text("now()"), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_auth_user_email"), "auth_user", ["email"], unique=False)
    op.create_index(op.f("ix_auth_user_username"), "auth_user", ["username"], unique=True)
    auth_group_roles = op.create_table(
        "auth_group_roles",
        sa.Column("group_id", sa.Integer(), nullable=False),
        sa.Column("role_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["group_id"], ["auth_group.id"], ondelete="cascade"),
        sa.ForeignKeyConstraint(["role_id"], ["auth_role.id"], ondelete="cascade"),
        sa.PrimaryKeyConstraint("group_id", "role_id"),
    )
    op.create_table(
        "auth_role_permissions",
        sa.Column("role_id", sa.Integer(), nullable=False),
        sa.Column("permission_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["permission_id"], ["auth_permission.id"], ondelete="cascade"),
        sa.ForeignKeyConstraint(["role_id"], ["auth_role.id"], ondelete="cascade"),
        sa.PrimaryKeyConstraint("role_id", "permission_id"),
    )
    auth_user_groups = op.create_table(
        "auth_user_groups",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("group_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["group_id"], ["auth_group.id"], ondelete="cascade"),
        sa.ForeignKeyConstraint(["user_id"], ["auth_user.id"], ondelete="cascade"),
        sa.PrimaryKeyConstraint("user_id", "group_id"),
    )
    auth_user_roles = op.create_table(
        "auth_user_roles",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("role_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["role_id"], ["auth_role.id"], ondelete="cascade"),
        sa.ForeignKeyConstraint(["user_id"], ["auth_user.id"], ondelete="cascade"),
        sa.PrimaryKeyConstraint("user_id", "role_id"),
    )

    op.bulk_insert(
        auth_user,
        [
            {
                "id": 1,
                "username": "admin",
                "is_active": True,
                "fullname": "Admin",
                "password": "$2b$12$0KXG1sQknJsMYxKNlZp8JuSxSEOofiE3HRROx1DlArkO0jWSc8sP2",  # password: admin
                "email": "admin@bib-batteries.fr",
                "create_time": datetime.now(),
            }
        ],
    )

    op.bulk_insert(
        auth_role,
        [
            {
                "id": 1,
                "key": "admin",
                "name": "Admin",
                "desc": "Admin",
            }
        ],
    )

    op.bulk_insert(
        auth_user_roles,
        [
            {
                "role_id": 1,
                "user_id": 1,
            }
        ],
    )

    op.bulk_insert(
        auth_group,
        [
            {
                "id": 1,
                "key": "admin",
                "name": "Admin",
                "desc": "Admin",
            }
        ],
    )

    op.bulk_insert(
        auth_group_roles,
        [
            {
                "role_id": 1,
                "group_id": 1,
            }
        ],
    )

    op.bulk_insert(
        auth_user_groups,
        [
            {
                "user_id": 1,
                "group_id": 1,
            }
        ],
    )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("auth_user_roles")
    op.drop_table("auth_user_groups")
    op.drop_table("auth_role_permissions")
    op.drop_table("auth_group_roles")
    op.drop_index(op.f("ix_auth_user_username"), table_name="auth_user")
    op.drop_index(op.f("ix_auth_user_email"), table_name="auth_user")
    op.drop_table("auth_user")
    op.drop_index(op.f("ix_auth_token_token"), table_name="auth_token")
    op.drop_table("auth_token")
    op.drop_index(op.f("ix_auth_role_key"), table_name="auth_role")
    op.drop_table("auth_role")
    op.drop_index(op.f("ix_auth_permission_key"), table_name="auth_permission")
    op.drop_table("auth_permission")
    op.drop_index(op.f("ix_auth_group_key"), table_name="auth_group")
    op.drop_table("auth_group")
    # ### end Alembic commands ###
